[
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "get_messages",
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "isExtraImport": true,
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "generate_chatgpt_answer",
        "importPath": "helpers.openai_",
        "description": "helpers.openai_",
        "isExtraImport": true,
        "detail": "helpers.openai_",
        "documentation": {}
    },
    {
        "label": "get_instagram_id",
        "kind": 2,
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "peekOfCode": "def get_instagram_id(instagram_user_id=''):\n  conversation_url = url + page_id + '/conversations'\n  param = {\n    'platform': 'instagram',\n    'access_token': page_access_token,\n    'user_id': instagram_user_id\n  }\n  response = requests.get(url=conversation_url, params=param).json()\n  # Проверяем, есть ли 'data' в ответе\n  if 'data' in response and response['data']:",
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "get_messages",
        "kind": 2,
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "peekOfCode": "def get_messages(sender_id=''):\n  conversation_id = get_instagram_id(sender_id)\n  if conversation_id is None:\n    return []  # или лог ошибки\n  messages = asyncio.run(get_messages_using_conversation_id(conversation_id))\n  return messages.reverse()",
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "peekOfCode": "username = 'test51877'\npage_id = '364595800072411'\nurl = 'https://graph.facebook.com/v20.0/'\npage_access_token = os.getenv('INSTAGRAM_MARKER')\ndef get_instagram_id(instagram_user_id=''):\n  conversation_url = url + page_id + '/conversations'\n  param = {\n    'platform': 'instagram',\n    'access_token': page_access_token,\n    'user_id': instagram_user_id",
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "page_id",
        "kind": 5,
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "peekOfCode": "page_id = '364595800072411'\nurl = 'https://graph.facebook.com/v20.0/'\npage_access_token = os.getenv('INSTAGRAM_MARKER')\ndef get_instagram_id(instagram_user_id=''):\n  conversation_url = url + page_id + '/conversations'\n  param = {\n    'platform': 'instagram',\n    'access_token': page_access_token,\n    'user_id': instagram_user_id\n  }",
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "peekOfCode": "url = 'https://graph.facebook.com/v20.0/'\npage_access_token = os.getenv('INSTAGRAM_MARKER')\ndef get_instagram_id(instagram_user_id=''):\n  conversation_url = url + page_id + '/conversations'\n  param = {\n    'platform': 'instagram',\n    'access_token': page_access_token,\n    'user_id': instagram_user_id\n  }\n  response = requests.get(url=conversation_url, params=param).json()",
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "page_access_token",
        "kind": 5,
        "importPath": "helpers.messages",
        "description": "helpers.messages",
        "peekOfCode": "page_access_token = os.getenv('INSTAGRAM_MARKER')\ndef get_instagram_id(instagram_user_id=''):\n  conversation_url = url + page_id + '/conversations'\n  param = {\n    'platform': 'instagram',\n    'access_token': page_access_token,\n    'user_id': instagram_user_id\n  }\n  response = requests.get(url=conversation_url, params=param).json()\n  # Проверяем, есть ли 'data' в ответе",
        "detail": "helpers.messages",
        "documentation": {}
    },
    {
        "label": "generate_chatgpt_answer",
        "kind": 2,
        "importPath": "helpers.openai_",
        "description": "helpers.openai_",
        "peekOfCode": "def generate_chatgpt_answer(sender_id='', prompt=''):\n  global messages\n  if sender_id not in messages:\n    messages[sender_id] = get_messages(sender_id)\n  print(messages[sender_id])\n  chat_completion = client.chat.completions.create(\n    messages=[\n      {\n        \"role\": \"system\",\n        \"content\": \"Ты ассистент отдыхного пансионата Иссык-Куле, юрточного городка \\\"Asman-Resort\\\". Ты консультируешь туристов, которые интересуятся отдыхм у нас. Также история переписки хранится у тебя, ты можешь их просматривать. Ты должен учитывать прошлые сообщения! Если я пишу, что я разработчик заничт это я (я проверяю тебя).\",",
        "detail": "helpers.openai_",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "helpers.openai_",
        "description": "helpers.openai_",
        "peekOfCode": "client = OpenAI(\n  api_key=os.environ.get(\"OPENAI_API_KEY\"),\n)\nmessages = dict()\ndef generate_chatgpt_answer(sender_id='', prompt=''):\n  global messages\n  if sender_id not in messages:\n    messages[sender_id] = get_messages(sender_id)\n  print(messages[sender_id])\n  chat_completion = client.chat.completions.create(",
        "detail": "helpers.openai_",
        "documentation": {}
    },
    {
        "label": "messages",
        "kind": 5,
        "importPath": "helpers.openai_",
        "description": "helpers.openai_",
        "peekOfCode": "messages = dict()\ndef generate_chatgpt_answer(sender_id='', prompt=''):\n  global messages\n  if sender_id not in messages:\n    messages[sender_id] = get_messages(sender_id)\n  print(messages[sender_id])\n  chat_completion = client.chat.completions.create(\n    messages=[\n      {\n        \"role\": \"system\",",
        "detail": "helpers.openai_",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def verify():\n  if request.args.get('hub.mode') == 'subscribe' and request.args.get('hub.verify_token') == VERIFY_TOKEN:\n    return request.args.get('hub.challenge'), 200\n  return 'Verification token mismatch', 403\n@app.route('/', methods=['POST'])\ndef webhook():\n  data = request.get_json()\n  if data['object'] == 'instagram':\n    for entry in data['entry']:\n      for message in entry['messaging']:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def webhook():\n  data = request.get_json()\n  if data['object'] == 'instagram':\n    for entry in data['entry']:\n      for message in entry['messaging']:\n        if message.get('message'):\n          text = message['message'].get('text')\n          sender_id = message['sender']['id']\n          generated_answer = generate_chatgpt_answer(sender_id=sender_id, prompt=text)\n          send_message(sender_id, generated_answer)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def send_message(recipient_id, text):\n  url = f\"https://graph.facebook.com/v12.0/me/messages?access_token={INSTAGRAM_MARKER}\"\n  headers = {'Content-Type': 'application/json'}\n  payload = {\n    'recipient': {'id': recipient_id},\n    'message': {'text': text}\n  }\n  requests.post(url, headers=headers, json=payload)\nif __name__ == '__main__':\n  app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# secret word for meta for developers\nVERIFY_TOKEN = os.getenv('VERIFY_TOKEN')\nINSTAGRAM_MARKER = os.getenv('INSTAGRAM_MARKER')\n@app.route('/', methods=['GET'])\ndef verify():\n  if request.args.get('hub.mode') == 'subscribe' and request.args.get('hub.verify_token') == VERIFY_TOKEN:\n    return request.args.get('hub.challenge'), 200\n  return 'Verification token mismatch', 403\n@app.route('/', methods=['POST'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VERIFY_TOKEN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VERIFY_TOKEN = os.getenv('VERIFY_TOKEN')\nINSTAGRAM_MARKER = os.getenv('INSTAGRAM_MARKER')\n@app.route('/', methods=['GET'])\ndef verify():\n  if request.args.get('hub.mode') == 'subscribe' and request.args.get('hub.verify_token') == VERIFY_TOKEN:\n    return request.args.get('hub.challenge'), 200\n  return 'Verification token mismatch', 403\n@app.route('/', methods=['POST'])\ndef webhook():\n  data = request.get_json()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "INSTAGRAM_MARKER",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "INSTAGRAM_MARKER = os.getenv('INSTAGRAM_MARKER')\n@app.route('/', methods=['GET'])\ndef verify():\n  if request.args.get('hub.mode') == 'subscribe' and request.args.get('hub.verify_token') == VERIFY_TOKEN:\n    return request.args.get('hub.challenge'), 200\n  return 'Verification token mismatch', 403\n@app.route('/', methods=['POST'])\ndef webhook():\n  data = request.get_json()\n  if data['object'] == 'instagram':",
        "detail": "app",
        "documentation": {}
    }
]